package com.ds;

public class BST<Key extends Comparable<Key>,Value> {

	
	private static class Node<Key,Value>{
		private Key key;
		private Value value;
		private Node<Key,Value> left;
		private Node<Key,Value> right;
		
		public Node(Key key,Value value){
			this.key  = key;
			this.value  = value;
		}
		
	} 
	
	
	private Node<Key,Value> root;
	
	private void put(Key key,Value val){ 
		
		Node<Key,Value> x = root;
		
		while(x != null){
			
			int cmp = key.compareTo( x.key );
			if(cmp < 0) x = x.left;
			else x = x.right;
		}
		Node<Key,Value> newNode = new Node(key,val);
		
	}
		
	private Node put(Node<Key,Value> node,Key key,Value val){
		if(node == null) return new Node(key,val);
	}
	
	public Value get(Key key){ 
		
		Node<Key,Value> x = root;
		
		while(x != null){
			
			int cmp = key.compareTo( x.key );
			if(cmp < 0) x = x.left;
			else if(cmp > 0) x = x.right;
			else if(cmp == 0) return x.value;
		}
		return null;
	}
	
	
}
